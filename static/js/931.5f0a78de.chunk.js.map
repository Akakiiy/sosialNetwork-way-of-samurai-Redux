{"version":3,"file":"static/js/931.5f0a78de.chunk.js","mappings":"kKACA,MAAwB,qBAAxB,EAAiE,iCCAjE,EAA0B,2BAA1B,EAAiE,6B,uCCoEjE,EArDuC,SAACA,GAEpC,OACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACHC,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIC,YAAY,EAAOC,QAAS,IACtEC,iBAAkBC,EAAAA,KAAaC,MAAM,CACjCN,MAAOK,EAAAA,KAAaL,MAAM,iBAAiBO,SAAS,YACpDN,SAAUI,EAAAA,KAAaE,SAAS,cAEpCC,SAAU,SAACC,GACPb,EAAMc,MAAMD,EAChB,EACAE,gBAAgB,EAAKC,UAErBC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,UAAWC,EAAYJ,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIf,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,OACLC,KAAK,QACLC,YAAa,WACpBvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAY,CAACF,KAAK,QACLG,UAAU,YAE5BT,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIf,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,WACLC,KAAK,WACLC,YAAa,cACpBvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAY,CAACF,KAAK,WACLG,UAAU,YAE5BT,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIf,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,WACLC,KAAK,gBACZtB,EAAAA,EAAAA,KAAA,QAAAe,SAAM,wFAEVf,EAAAA,EAAAA,KAAA,OAAKkB,UAAWC,EAAUJ,SAElBhB,EAAM2B,aAAcV,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAZ,SAAA,EAChBf,EAAAA,EAAAA,KAAA,OAAK4B,IAAK7B,EAAM2B,WAAYG,IAAI,aAChC7B,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,OACLC,KAAK,aACZtB,EAAAA,EAAAA,KAACwB,EAAAA,GAAY,CAACF,KAAK,WACLG,UAAU,cAIpCzB,EAAAA,EAAAA,KAAA,OAAAe,UACIf,EAAAA,EAAAA,KAAA,UAAQqB,KAAK,SAAQN,SAAC,iBAK1C,E,iDClBA,EA/BuC,WACnC,IAAMe,GAAoBC,EAAAA,EAAAA,IAAYC,EAAAA,IAChCC,GAAmCF,EAAAA,EAAAA,IAAYG,EAAAA,IAC/CC,GAAqBJ,EAAAA,EAAAA,IAAYK,EAAAA,IACjCV,GAAqBK,EAAAA,EAAAA,IAAYM,EAAAA,IAEjCC,GAAkDC,EAAAA,EAAAA,MAMxD,OAAIT,GACO9B,EAAAA,EAAAA,KAACwC,EAAAA,GAAQ,CAACC,GAAI,WAAYC,SAAO,KAGxC1B,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAQJ,SAAA,EACpBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIf,EAAAA,EAAAA,KAAA,MAAAe,SAAI,WACJf,EAAAA,EAAAA,KAAC2C,EAAS,CAAC9B,MAXL,SAACD,GACf0B,GAASzB,EAAAA,EAAAA,IAAMD,GACnB,EAUuBc,WAAYA,KACvB1B,EAAAA,EAAAA,KAAA,OAAKkB,UAAWC,EACXyB,MAAQX,GAAqB,CAACY,WAAY,UAAWC,QAAS,KAA6B/B,SAAEkB,OAGlGE,GAAYnC,EAAAA,EAAAA,KAAC+C,EAAAA,EAAS,IAAM,OAI5C,C","sources":["webpack://way-of-samurai/./src/components/Login/Login.module.css?3530","webpack://way-of-samurai/./src/components/Login/LoginForm/LoginForm.module.css?1b2c","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__4rE5+\",\"loginErrorMessage\":\"Login_loginErrorMessage__BcjIq\"};","// extracted by mini-css-extract-plugin\nexport default {\"captcha\":\"LoginForm_captcha__eLVe0\",\"loginForm\":\"LoginForm_loginForm__2wz68\"};","import s from './LoginForm.module.css'\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\n\ntype PropsType = {\n    captchaUrl: string | null\n    login: (values: ValuesType) => void\n}\nexport type ValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\nconst LoginForm: React.FC<PropsType> = (props) => {\n\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', rememberMe: false, captcha: ''}}\n            validationSchema={Yup.object().shape({\n                email: Yup.string().email('Invalid email').required('Required'),\n                password: Yup.string().required('Required'),\n            })}\n            onSubmit={(values: ValuesType) => {\n                props.login(values);\n            }}\n            validateOnBlur={true}\n        >\n            <Form className={s.loginForm}>\n                <div>\n                    <Field type=\"text\"\n                           name=\"email\"\n                           placeholder={'Login'} />\n                    <ErrorMessage name=\"email\"\n                                  component=\"div\" />\n                </div>\n                <div>\n                    <Field type=\"password\"\n                           name=\"password\"\n                           placeholder={'Password'} />\n                    <ErrorMessage name=\"password\"\n                                  component=\"div\" />\n                </div>\n                <div>\n                    <Field type=\"checkbox\"\n                           name=\"rememberMe\"/>\n                    <span>запомнить меня</span>\n                </div>\n                <div className={s.captcha}>\n                    {\n                        props.captchaUrl && <>\n                            <img src={props.captchaUrl} alt=\"captcha\"/>\n                            <Field type=\"text\"\n                                   name=\"captcha\"/>\n                            <ErrorMessage name=\"password\"\n                                          component=\"div\" />\n                        </>\n                    }\n                </div>\n                <div>\n                    <button type=\"submit\">Log IN</button>\n                </div>\n            </Form>\n        </Formik>\n    );\n}\n\nexport default LoginForm;","import s from './Login.module.css';\nimport LoginForm, {ValuesType} from \"./LoginForm/LoginForm\";\nimport {Navigate} from \"react-router-dom\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport React from \"react\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"../Redux/store-redux\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCaptchaUrlSelector,\n    getIsLoadingSelector,\n    getIsLoggedSelector,\n    getLoadingErrorMessageSelector\n} from \"../Redux/selectors/auth-selectors\";\nimport {login} from \"../Redux/auth-reducer\";\n\ntype PropsType = {}\n\nconst LoginPage: React.FC<PropsType> = () => {\n    const isLogged: boolean = useSelector(getIsLoggedSelector);\n    const loginErrorMessage: string | null = useSelector(getLoadingErrorMessageSelector);\n    const isLoading: boolean = useSelector(getIsLoadingSelector);\n    const captchaUrl: string = useSelector(getCaptchaUrlSelector);\n\n    const dispatch: ThunkDispatch<AppStateType, any, any> = useDispatch()\n\n    const loginFunc = (values: ValuesType) => {\n        dispatch(login(values));\n    }\n\n    if (isLogged) {\n        return <Navigate to={'/profile'} replace/>\n    }\n    return (\n        <div className={s.login}>\n            <div>\n                <h2>LOGIN</h2>\n                <LoginForm login={loginFunc}\n                           captchaUrl={captchaUrl}/>\n                <div className={s.loginErrorMessage}\n                     style={(loginErrorMessage && {visibility: 'visible', opacity: '1'}) as React.CSSProperties}>{loginErrorMessage}</div>\n            </div>\n            {\n                isLoading ? <Preloader /> : null\n            }\n        </div>\n    );\n}\n\nexport default LoginPage"],"names":["props","_jsx","Formik","initialValues","email","password","rememberMe","captcha","validationSchema","Yup","shape","required","onSubmit","values","login","validateOnBlur","children","_jsxs","Form","className","s","Field","type","name","placeholder","ErrorMessage","component","captchaUrl","_Fragment","src","alt","isLogged","useSelector","getIsLoggedSelector","loginErrorMessage","getLoadingErrorMessageSelector","isLoading","getIsLoadingSelector","getCaptchaUrlSelector","dispatch","useDispatch","Navigate","to","replace","LoginForm","style","visibility","opacity","Preloader"],"sourceRoot":""}