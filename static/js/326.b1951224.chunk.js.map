{"version":3,"file":"static/js/326.b1951224.chunk.js","mappings":"iKACA,MAA+B,4BAA/B,EAAmE,qBAAnE,EAA4G,iC,qHC6F5G,EA9EuC,SAACA,GACpC,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAEbC,SAAU,SAACC,GACPT,EAAMU,MAAMD,EAChB,IAEJE,EAAeC,EAAAA,EAAAA,UAARC,GAAsBC,EAAAA,EAAAA,GAAAH,EAAA,GAAlB,GAKPI,EAASC,EAAAA,KAAaC,MAAM,CAC5Bb,MAAOY,EAAAA,KAAaZ,MAAM,iBAAiBc,SAAS,+BACpDb,SAAUW,EAAAA,KAAaE,SAAS,iCAE9BC,EAAU,CACNC,UAAS,SAAAC,EAAeC,GAAa,OAADC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAApB,OAALJ,EAAKN,EAALM,MAAKE,EAAAE,KAAA,EACZhB,EAAOiB,eAAeL,GAAKM,EAAAA,EAAAA,GAAA,GAAIN,EAAQL,IAAQ,KAAD,mBAAAO,EAAAK,OAAA,GAAAR,EAAA,IADdH,EAE1C,GAGJ,OACIY,EAAAA,EAAAA,MAACvB,EAAAA,EAAI,CACDC,KAAMA,EACNuB,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBlC,cAAeF,EAAOE,cACtBoC,SAAUtC,EAAOuC,aAAaC,SAAA,EAE9BC,EAAAA,EAAAA,KAAC9B,EAAAA,EAAAA,KAAS,CACN+B,MAAM,WACNC,KAAK,QACLC,MAAO,CAAC1B,GAASsB,UAEjBC,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CAACC,SAAU9C,EAAO+C,aAAc1B,MAAOrB,EAAOQ,OAAOL,WAG/DsC,EAAAA,EAAAA,KAAC9B,EAAAA,EAAAA,KAAS,CACN+B,MAAM,WACNC,KAAK,WACLC,MAAO,CAAC1B,GAASsB,UAEjBC,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,SAAc,CAACC,SAAU9C,EAAO+C,kBAGrCN,EAAAA,EAAAA,KAAC9B,EAAAA,EAAAA,KAAS,CAACgC,KAAK,aAAaK,cAAc,UAAUX,WAAY,CAAEY,OAAQ,EAAGb,KAAM,IAAKI,UACrFC,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CAACJ,SAAU9C,EAAO+C,aAAaP,SAAC,kBAGzCzC,EAAMoD,aAAcjB,EAAAA,EAAAA,MAAAkB,EAAAA,SAAA,CAAAZ,SAAA,EAChBC,EAAAA,EAAAA,KAAA,OAAKY,IAAKtD,EAAMoD,WAAYG,IAAI,aAChCb,EAAAA,EAAAA,KAAC9B,EAAAA,EAAAA,KAAS,CACR+B,MAAM,UACNC,KAAK,UACLC,MAAO,CAAC,CAAC3B,UAAU,EAAMsC,QAAS,yBAA0Bf,UAE5DC,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CAACC,SAAU9C,EAAO+C,qBAIlCb,EAAAA,EAAAA,MAACvB,EAAAA,EAAAA,KAAS,CAAC0B,WAAY,CAAEY,OAAQ,EAAGb,KAAM,IAAKI,SAAA,EAC3CC,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACC,KAAK,UAAUC,SAAS,SAAQlB,SAAC,YAGzCC,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACG,MAAO,CAACC,WAAY,QAASF,SAAS,SAASG,QAzDnD,WACZ7D,EAAO8D,YACPlD,EAAKmD,aACT,EAsDoFvB,SAAC,eAMzF,E,iDC3CA,EA/BuC,WACnC,IAAMwB,GAAoBC,EAAAA,EAAAA,IAAYC,EAAAA,IAChCC,GAAmCF,EAAAA,EAAAA,IAAYG,EAAAA,IAC/CC,GAAqBJ,EAAAA,EAAAA,IAAYK,EAAAA,IACjCnB,GAAqBc,EAAAA,EAAAA,IAAYM,EAAAA,IAEjCC,GAAkDC,EAAAA,EAAAA,MAMxD,OAAIT,GACOvB,EAAAA,EAAAA,KAACiC,EAAAA,GAAQ,CAACC,GAAI,WAAYC,SAAO,KAGxC1C,EAAAA,EAAAA,MAAA,OAAK2C,UAAWC,EAAQtC,SAAA,EACpBN,EAAAA,EAAAA,MAAA,OAAK2C,UAAWC,EAAetC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAACsC,EAAS,CAACtE,MAXL,SAACD,GACfgE,GAAS/D,EAAAA,EAAAA,IAAMD,GACnB,EAUuB2C,WAAYA,KACvBV,EAAAA,EAAAA,KAAA,OAAKoC,UAAWC,EACXnB,MAAQQ,GAAqB,CAACa,WAAY,UAAWC,QAAS,KAA6BzC,SAAE2B,OAGlGE,GAAY5B,EAAAA,EAAAA,KAACyC,EAAAA,EAAS,IAAM,OAI5C,C","sources":["webpack://way-of-samurai/./src/components/Login/Login.module.css?3530","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginWrapper\":\"Login_loginWrapper__Zly+A\",\"login\":\"Login_login__4rE5+\",\"loginErrorMessage\":\"Login_loginErrorMessage__BcjIq\"};","import {useFormik} from \"formik\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { Button, Checkbox, Form, Input } from 'antd';\n\ntype PropsType = {\n    captchaUrl: string | null\n    login: (values: ValuesType) => void\n}\nexport type ValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\nconst LoginForm: React.FC<PropsType> = (props) => {\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captcha: '',\n        },\n        onSubmit: (values: ValuesType) => {\n            props.login(values);\n        },\n    });\n    const [form] = Form.useForm();\n    const onReset = () => {\n        formik.resetForm();\n        form.resetFields();\n    };\n    let schema = Yup.object().shape({\n        email: Yup.string().email('Invalid email').required('Please input your username!'),\n        password: Yup.string().required('Please input your password!'),\n    });\n    const yupSync = {\n        async validator({field}: any, value: any) {\n            await schema.validateSyncAt(field, {[field]: value});\n        },\n    };\n\n    return (\n        <Form\n            form={form}\n            labelCol={{ span: 8 }}\n            wrapperCol={{ span: 16 }}\n            initialValues={formik.initialValues}\n            onFinish={formik.handleSubmit}\n        >\n            <Form.Item\n                label=\"Username\"\n                name=\"email\"\n                rules={[yupSync]}\n            >\n                <Input onChange={formik.handleChange} value={formik.values.email}/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Password\"\n                name=\"password\"\n                rules={[yupSync]}\n            >\n                <Input.Password onChange={formik.handleChange}/>\n            </Form.Item>\n\n            <Form.Item name=\"rememberMe\" valuePropName=\"checked\" wrapperCol={{ offset: 8, span: 16 }}>\n                <Checkbox onChange={formik.handleChange}>Remember me</Checkbox>\n            </Form.Item>\n            {\n                props.captchaUrl && <>\n                    <img src={props.captchaUrl} alt=\"captcha\"/>\n                    <Form.Item\n                      label=\"Captcha\"\n                      name=\"captcha\"\n                      rules={[{required: true, message: 'Please input captcha' }]}\n                    >\n                      <Input onChange={formik.handleChange}/>\n                    </Form.Item>\n                </>\n            }\n            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n                <Button style={{marginLeft: '25px'}} htmlType=\"button\" onClick={onReset}>\n                    Reset\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nexport default LoginForm;","import s from './Login.module.css';\nimport LoginForm, {ValuesType} from \"./LoginForm/LoginForm\";\nimport {Navigate} from \"react-router-dom\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport React from \"react\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"../Redux/store-redux\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCaptchaUrlSelector,\n    getIsLoadingSelector,\n    getIsLoggedSelector,\n    getLoadingErrorMessageSelector\n} from \"../Redux/selectors/auth-selectors\";\nimport {login} from \"../Redux/auth-reducer\";\n\ntype PropsType = {}\n\nconst LoginPage: React.FC<PropsType> = () => {\n    const isLogged: boolean = useSelector(getIsLoggedSelector);\n    const loginErrorMessage: string | null = useSelector(getLoadingErrorMessageSelector);\n    const isLoading: boolean = useSelector(getIsLoadingSelector);\n    const captchaUrl: string = useSelector(getCaptchaUrlSelector);\n\n    const dispatch: ThunkDispatch<AppStateType, any, any> = useDispatch()\n\n    const loginFunc = (values: ValuesType) => {\n        dispatch(login(values));\n    }\n\n    if (isLogged) {\n        return <Navigate to={'/profile'} replace/>\n    }\n    return (\n        <div className={s.login}>\n            <div className={s.loginWrapper}>\n                <h2>LOGIN</h2>\n                <LoginForm login={loginFunc}\n                           captchaUrl={captchaUrl}/>\n                <div className={s.loginErrorMessage}\n                     style={(loginErrorMessage && {visibility: 'visible', opacity: '1'}) as React.CSSProperties}>{loginErrorMessage}</div>\n            </div>\n            {\n                isLoading ? <Preloader /> : null\n            }\n        </div>\n    );\n}\n\nexport default LoginPage"],"names":["props","formik","useFormik","initialValues","email","password","rememberMe","captcha","onSubmit","values","login","_Form$useForm","Form","form","_slicedToArray","schema","Yup","shape","required","yupSync","validator","_ref","value","_asyncToGenerator","_regeneratorRuntime","mark","_callee","field","wrap","_context","prev","next","validateSyncAt","_defineProperty","stop","_jsxs","labelCol","span","wrapperCol","onFinish","handleSubmit","children","_jsx","label","name","rules","Input","onChange","handleChange","valuePropName","offset","Checkbox","captchaUrl","_Fragment","src","alt","message","Button","type","htmlType","style","marginLeft","onClick","resetForm","resetFields","isLogged","useSelector","getIsLoggedSelector","loginErrorMessage","getLoadingErrorMessageSelector","isLoading","getIsLoadingSelector","getCaptchaUrlSelector","dispatch","useDispatch","Navigate","to","replace","className","s","LoginForm","visibility","opacity","Preloader"],"sourceRoot":""}