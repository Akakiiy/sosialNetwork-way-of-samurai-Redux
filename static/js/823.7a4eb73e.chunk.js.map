{"version":3,"file":"static/js/823.7a4eb73e.chunk.js","mappings":"gLACA,EAAwB,qBAAxB,EAAiE,iCCAjE,EAA0B,2BAA1B,EAAiE,6B,uCCyDjE,EArDkB,SAACA,GAEf,OACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACHC,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIC,YAAY,EAAOC,QAAS,IACtEC,iBAAkBC,EAAAA,KAAaC,MAAM,CACjCN,MAAOK,EAAAA,KAAaL,MAAM,iBAAiBO,SAAS,YACpDN,SAAUI,EAAAA,KAAaE,SAAS,cAEpCC,SAAU,SAACC,GACPb,EAAMc,MAAMD,EAChB,EACAE,gBAAgB,EAAKC,UAErBC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,UAAWC,EAAYJ,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIf,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,OACLC,KAAK,QACLC,YAAa,WACpBvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAY,CAACF,KAAK,QACLG,UAAU,YAE5BT,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIf,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,WACLC,KAAK,WACLC,YAAa,cACpBvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAY,CAACF,KAAK,WACLG,UAAU,YAE5BT,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIf,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,WACLC,KAAK,gBACZtB,EAAAA,EAAAA,KAAA,QAAAe,SAAM,wFAEVf,EAAAA,EAAAA,KAAA,OAAKkB,UAAWC,EAAUJ,SAElBhB,EAAM2B,aAAcV,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAZ,SAAA,EAChBf,EAAAA,EAAAA,KAAA,OAAK4B,IAAK7B,EAAM2B,WAAYG,IAAI,aAChC7B,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CAACC,KAAK,OACLC,KAAK,aACZtB,EAAAA,EAAAA,KAACwB,EAAAA,GAAY,CAACF,KAAK,WACLG,UAAU,cAIpCzB,EAAAA,EAAAA,KAAA,OAAAe,UACIf,EAAAA,EAAAA,KAAA,UAAQqB,KAAK,SAAQN,SAAC,iBAK1C,E,oBC5BA,EAvBc,SAAChB,GAEX,OAAIA,EAAM+B,UACC9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAQ,CAACC,GAAI,cAIrBhB,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAQJ,SAAA,EACpBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIf,EAAAA,EAAAA,KAAA,MAAAe,SAAI,WACJf,EAAAA,EAAAA,KAACiC,EAAS,CAACH,SAAU/B,EAAM+B,SAChBjB,MAAOd,EAAMc,MACba,WAAY3B,EAAM2B,cAC7B1B,EAAAA,EAAAA,KAAA,OAAKkB,UAAWC,EACXe,MAAOnC,EAAMoC,mBAAqB,CAACC,WAAY,UAAWC,QAAS,KAAKtB,SAAEhB,EAAMoC,uBAGrFpC,EAAMuC,WAAYtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,IAAM,OAIlD,E,oBCNA,GAAeC,EAAAA,EAAAA,KATY,SAACC,GACxB,MAAO,CACHX,UAAUY,EAAAA,EAAAA,IAAoBD,GAC9BN,mBAAmBQ,EAAAA,EAAAA,IAA+BF,GAClDH,WAAWM,EAAAA,EAAAA,IAAqBH,GAChCf,YAAYmB,EAAAA,EAAAA,IAAsBJ,GAE1C,GAE2C,CAAC5B,MAAAA,EAAAA,IAA5C,CAAoDiC,E","sources":["webpack://way-of-samurai/./src/components/Login/Login.module.css?3530","webpack://way-of-samurai/./src/components/Login/LoginForm/LoginForm.module.css?1b2c","components/Login/LoginForm/LoginForm.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__4rE5+\",\"loginErrorMessage\":\"Login_loginErrorMessage__BcjIq\"};","// extracted by mini-css-extract-plugin\nexport default {\"captcha\":\"LoginForm_captcha__eLVe0\",\"loginForm\":\"LoginForm_loginForm__2wz68\"};","import s from './LoginForm.module.css'\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\n\nconst LoginForm = (props) => {\n\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', rememberMe: false, captcha: ''}}\n            validationSchema={Yup.object().shape({\n                email: Yup.string().email('Invalid email').required('Required'),\n                password: Yup.string().required('Required'),\n            })}\n            onSubmit={(values) => {\n                props.login(values);\n            }}\n            validateOnBlur={true}\n        >\n            <Form className={s.loginForm}>\n                <div>\n                    <Field type=\"text\"\n                           name=\"email\"\n                           placeholder={'Login'} />\n                    <ErrorMessage name=\"email\"\n                                  component=\"div\" />\n                </div>\n                <div>\n                    <Field type=\"password\"\n                           name=\"password\"\n                           placeholder={'Password'} />\n                    <ErrorMessage name=\"password\"\n                                  component=\"div\" />\n                </div>\n                <div>\n                    <Field type=\"checkbox\"\n                           name=\"rememberMe\"/>\n                    <span>запомнить меня</span>\n                </div>\n                <div className={s.captcha}>\n                    {\n                        props.captchaUrl && <>\n                            <img src={props.captchaUrl} alt=\"captcha\"/>\n                            <Field type=\"text\"\n                                   name=\"captcha\"/>\n                            <ErrorMessage name=\"password\"\n                                          component=\"div\" />\n                        </>\n                    }\n                </div>\n                <div>\n                    <button type=\"submit\">Log IN</button>\n                </div>\n            </Form>\n        </Formik>\n    );\n}\n\nexport default LoginForm;","import s from './Login.module.css';\nimport LoginForm from \"./LoginForm/LoginForm\";\nimport {Redirect} from \"react-router-dom\";\nimport Preloader from \"../common/Preloader/Preloader\";\n\nconst Login = (props) => {\n\n    if (props.isLogged) {\n        return <Redirect to={'/profile'} />\n    }\n\n    return (\n        <div className={s.login}>\n            <div>\n                <h2>LOGIN</h2>\n                <LoginForm isLogged={props.isLogged}\n                           login={props.login}\n                           captchaUrl={props.captchaUrl}/>\n                <div className={s.loginErrorMessage}\n                     style={props.loginErrorMessage && {visibility: 'visible', opacity: '1'}}>{props.loginErrorMessage}</div>\n            </div>\n            {\n                props.isLoading ? <Preloader /> : null\n            }\n        </div>\n    );\n}\n\nexport default Login;","import {connect} from \"react-redux\";\nimport Login from \"./Login\";\nimport {login} from \"../Redux/auth-reducer\";\nimport {\n    getCaptchaUrlSelector,\n    getIsLoadingSelector,\n    getIsLoggedSelector,\n    getLoadingErrorMessageSelector\n} from \"../Redux/selectors/auth-selectors\";\n\n\nconst mapDispatchToProps = (state) => {\n    return {\n        isLogged: getIsLoggedSelector(state),\n        loginErrorMessage: getLoadingErrorMessageSelector(state),\n        isLoading: getIsLoadingSelector(state),\n        captchaUrl: getCaptchaUrlSelector(state),\n    }\n}\n\nexport default connect(mapDispatchToProps, {login})(Login);"],"names":["props","_jsx","Formik","initialValues","email","password","rememberMe","captcha","validationSchema","Yup","shape","required","onSubmit","values","login","validateOnBlur","children","_jsxs","Form","className","s","Field","type","name","placeholder","ErrorMessage","component","captchaUrl","_Fragment","src","alt","isLogged","Redirect","to","LoginForm","style","loginErrorMessage","visibility","opacity","isLoading","Preloader","connect","state","getIsLoggedSelector","getLoadingErrorMessageSelector","getIsLoadingSelector","getCaptchaUrlSelector","Login"],"sourceRoot":""}